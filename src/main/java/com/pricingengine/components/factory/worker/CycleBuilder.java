package com.pricingengine.components.factory.worker;import java.util.List;import java.util.concurrent.BlockingQueue;import com.pricingengine.components.factory.CycleFactory;import com.pricingengine.main.PricingEngineHelper;import com.pricingengine.vehicle.Cycle;import com.pricingengine.vehicle.CycleOrder;public class CycleBuilder implements Runnable {	private BlockingQueue<CycleOrder> ordersQ;	private List<Cycle> cycles;	public CycleBuilder(BlockingQueue<CycleOrder> ordersQ, List<Cycle> cycles) {		super();		this.ordersQ = ordersQ;		this.cycles = cycles;	}	public void run() {		for (CycleOrder order : ordersQ) {			synchronized (ordersQ) {				if (order.isOrderProcessed()) {					continue;				} else {					order.setOrderProcessed(Boolean.TRUE);				}			}			Cycle cycle = CycleFactory.buildCycle(order);			PricingEngineHelper.runPricingEngine(cycle);			cycles.add(cycle);		}	}}